git status
git log
git add 
git commit -m "message"

git diff 
git diff --staged
git reset HEAD (all files are restored from staging area)
git reset HEAD <filename> (only that particular file is restored from the staging area)
git checkout -- <filename> (restores the file to the previously committed version)
 - or - git checkout <filename> (utan -- )
git -a -m "message" (eller) git -am "message"  (to make a direct commit)


------------only BEFORE push-------------
git reset --soft HEAD^  (resets commit to the stage by throwing back to a version previous to HEAD)
(the above is useful when I want to add files to my previous commit but forgot them at first.)
git add todo.txt
git commit --amend -m "message" (adds the file to the previous commit and allows me to replace the commit message)
git reset --hard HEAD^  (will reset to previous commit and throw everything from the current one)
git reset --hard HEAD^^ (same as above but will reset to the commit before last commit)
------------only BEFORE push-------------

git remote add origin https....
git remote -v  (to check what remotes you have added)
git push -u origin master (to push it online to branch master)
...but this is incorrect. The right way should be:
git --set-upstream origin master
git push --set-upstream origin master
git push --set-upstream origin 'branch-name' (if you want to set it on a branch name)
git config --global credential.helper wincred (To set the password and user next time so that 
you dont have to keep writing it.
git pull  (to pull down the repo)
git remote add <name> <address>
git remote rm <name>
git push -u <name> branch (so so...see comment about --set-upstream)


----level 3----
git clone https-address (will be called the same as the repo online)
git clone https-address <name> (will be called <name>)
git branch cat  (to create branch cat)
git branch  (check available branches and which one you're on)
git checkout cat (switch to another branch)
echo "text" > newfilename.txt  (will create new txt-file with that text)
ls  ( will show available files)
git checkout master  (will not list the new file at this point...!)
git log  (nothing in the log either)
use git add, commit in branch first!
Then git checkout master
git merge cat
git will fastforward because nothing was changed in master during this time.
git branch -d cat will delete cat branch
git branch -D cat will delete cat branch and ignore unmerged changes!
git checkout -b admin  (creates a new branch and checkouts right away)
stop working on admin and go back to master
git checkout master
use git pull to make sure you have the latest changes.
git add commit push to master remote
git checkout admin to go back and finish our changes
git add, commit
git checkout master, git merge admin 
you end up in VI and you can add to message if you want.
-else-
hit escape and :wq to finish
Eventuellt måste du adda och committa här. Minns inte riktigt. 


----level 4------

I add info to create conflict!





Gitosis, gitorious

to escape > press Ctrl + C


