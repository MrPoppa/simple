git status
git log
git add 
git commit -m "message"

git diff 
git diff --staged
git reset HEAD (all files are restored from staging area)
git reset HEAD <filename> (only that particular file is restored from the staging area)
git checkout -- <filename> (restores the file to the previously committed version)
 - or - git checkout <filename> (utan -- )
git -a -m "message" (eller) git -am "message"  (to make a direct commit)


------------only BEFORE push-------------
git reset --soft HEAD^  (resets commit to the stage by throwing back to a version previous to HEAD)
(the above is useful when I want to add files to my previous commit but forgot them at first.)
git add todo.txt
git commit --amend -m "message" (adds the file to the previous commit and allows me to replace the commit message)
git reset --hard HEAD^  (will reset to previous commit and throw everything from the current one)
git reset --hard HEAD^^ (same as above but will reset to the commit before last commit)
------------only BEFORE push-------------

git remote add origin https....
git remote -v  (to check what remotes you have added)
git push -u origin master (to push it online to branch master)
...but this is incorrect. The right way should be:
git --set-upstream origin master
git push --set-upstream origin master
git push --set-upstream origin 'branch-name' (if you want to set it on a branch name)
git config --global credential.helper wincred (To set the password and user next time so that 
you dont have to keep writing it.
git pull  (to pull down the repo)
git remote add <name> <address>
git remote rm <name>
git push -u <name> branch (so so...see comment about --set-upstream)


----level 3----
git clone https-address (will be called the same as the repo online)
git clone https-address <name> (will be called <name>)
git branch cat  (to create branch cat)
git branch  (check available branches and which one you're on)
git checkout cat (switch to another branch)
echo "text" > newfilename.txt  (will create new txt-file with that text)
ls  ( will show available files)
git checkout master  (will not list the new file at this point...!)
git log  (nothing in the log either)
use git add, commit in branch first!
Then git checkout master
git merge cat
git will fastforward because nothing was changed in master during this time.
git branch -d cat will delete cat branch
git branch -D cat will delete cat branch and ignore unmerged changes!
git checkout -b admin  (creates a new branch and checkouts right away)
stop working on admin and go back to master
git checkout master
use git pull to make sure you have the latest changes.
git add commit push to master remote
git checkout admin to go back and finish our changes
git add, commit
git checkout master, git merge admin 
you end up in VI and you can add to message if you want.
-else-
hit escape and :wq to finish
Eventuellt måste du adda och committa här. Minns inte riktigt. 


----level 4------

I add info to create conflict!

first we add to new files in repo on laptop and push online.
Then we edit this file and try to push it.
It will be rejected because the tip of my current branch is behind.
Solve by:
pull & then push
What happens is that it creates a fetch first to the branch origin/master. 
Then it merges master with origin/master! It says "merge made by the recursive strategy"
when we do push it updates origin/master to be at the same state as our local repo.

next test:
Edit the same line in the same file on two different computers.
Then add, commit, push on one of them. 
Then do the same thing on the other and you will get rejected.
Do a git pull instead and get a conflict! "merge failed" "no changes added to commit"
Open file and check:


<<<<<<< HEAD
This file is a lie!!!
=======
This file is the truth!
>>>>>>> 2fb4eeca8c6d4f2673fd1f4dd232b38a037d8295
The last line is the hash of the latest commit to the online repo.
HEAD is the local version. Edit manually to fix!
Then write git commit -a   (do not add message)
In VI editor press I to edit. But rather print :wq to quit and commit automatically.
check git log to see the merge message!


--------level 5-----------

Use 
git push origin 'branch-name'
to add a branch to remote.
add, commit and when you push you will want to write not git push but
git push --set-upstream origin admin
Then you use git pull on the other machine and you will see the branch mentioned
But it will not show up in your local branches.
git branch -r  (will show you all the branches, even the remote ones)
switch to admin by git checkout admin
then do 
git remote show origin 
and see the branches and how they're pulled and pushed.
add, commit and push your branch.
Switch to master and to delete remote branch
git push origin :admin
git branch -d admin  (to delete locally) 
If there are changes you haven't merged it will warn you. To discard change -d to -D
To remove local references to branches that have already been deleted 
while you were working on them. Use 
git remote prune origin
to remove stale references to deleted remote branches.










Gitosis, gitorious

to escape > press Ctrl + C


